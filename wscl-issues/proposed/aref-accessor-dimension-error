Issue:          AREF-ACCESSOR-DIMENSION-ERROR
Forum:          Cleanup
Category:       CLARIFICATION
Status:         proposed
Edit History:   13-Jul-21, Version 1 by Robert Strandh
                17-Jul-21, Version 2 by Robert Strandh
                11-Aug-21, Version 3 by Tarn W. Burton (update current practice)
References:     AREF

Problem Description:

  In the draft ANSI Common Lisp specification, the description of
  the accessor AREF indicates no exceptional situations.

  It is therefore unclear what the behavior should be if AREF were
  given an invalid index for one of the dimensions of the array given
  as an argument.

Proposal (AREF-ACCESSOR-DIMENSION-ERROR:SIGNAL-ERROR-IN-SAFE-CODE):

  This proposal changes the description of the AREF accessor, so that
  the section "Exceptional Situations" contains the following text:

  "The accessor AREF should signal an error of type TYPE-ERROR if one
  of the indices given is invalid for the array passed as an
  argument."

Test Cases:

  (defun one (object)
    (declare (optimize (safety 3)))
    (aref object 1))

  (one (make-array 1 :initial-element nil)) =>
     ERROR: Invalid index 1 for array #(nil).

  (defun two (object)
    (declare (optimize (safety 3)))
    (setf (aref object 1) 345))

  (two (make-array 1 :initial-element nil)) =>
     ERROR: Invalid index 1 for array #(nil).

Rationale:

  We think it was a simple omission from the draft ANSI specification
  to not specify the behavior in this situation.

Current Practice:

  ABCL 1.8.1-dev-fasl43
    (one 234) => [signals type-error]
    (two 234) => [signals type-error]

  ACL 10.1
    (one 234) => [signals type-error]
    (two 234) => [signals type-error]

  CCL 1.12-f98
    (one 234) => [signals type-error]
    (two 234) => [signals type-error]

  CLASP cclasp-boehmprecise-0.4.2-4548-g80d9caef9-cst
    (one 234) => [signals type-error]
    (two 234) => [signals type-error]

  CLISP 2.49.93+
    (one 234) => [signals simple-type-error]
    (two 234) => [signals simple-type-error]

  CMU 2019-05-27 16:42:54 (21D Unicode)
    (one 234) => [signals type-error]
    (two 234) => [signals type-error]

  ECL 21.2.1-e68e6827
    (one 234) => [signals simple-type-error]
    (two 234) => [signals simple-type-error]

  LWPE 7.1.2
    (one 234) => [signals type-error]
    (two 234) => [signals type-error]

  SBCL 2.1.7
    (one 234) => [signals type-error]
    (two 234) => [signals type-error]

Cost to Implementors:

  Very small.  We believe that most implementations are already
  signaling an error in safe code.  Some implementations may signal a
  simple error, and those implementation would need to signal a
  type-error instead.

Cost to Users:

  None.

Cost of non-adoption:

  Application programmers may need to add numerous
  explicit checks to be certain that their code
  is conforming.

Benefits:

  Application programmers may rely on an error being
  signaled in safe code, and thus avoid having to
  add explicit checks in portable code.

Aesthetics:

  No influence.

Discussion:

  TODO
