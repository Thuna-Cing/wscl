Issue:          ENSURE-GENERIC-FUNCTION-DEFAULTS
Forum:          Cleanup
Category:       REWRITE
Status:         draft
Edit History:   01-Mar-24, Version 1 by Robert Strandh,
References:     ENSURE-GENERIC-FUNCTION

Problem Description:

  In the draft ANSI Common Lisp specification, the description of the
  function ENSURE-GENERIC-FUNCTION does not mention any default values
  for any of the keyword parameters, thereby giving the impression
  that these parameters are in fact mandatory.  Consider the phrase
  "If function-name specifies a generic function that has a different
  value for any of the following arguments, the generic function is
  modified to have the new value: :ARGUMENT-PRECEDENCE-ORDER,
  :DECLARE, :DOCUMENTATION, :METHOD-COMBINATION.", and the phrases
  mentioning the keyword parameters :LAMBDA-LIST,
  :GENERIC-FUNCTION-CLASS, and :METHOD-CLASS.  The situations
  described by those phrases clearly do not work if the corresponding
  keyword argument is not supplied by the caller, because the
  corresponding parameter would then have the value NIL.

  So if some client code, say code that results from the expansion of
  the DEFMETHOD macro, would like to use ENSURE-GENERIC-FUNCTION to
  make sure a generic function with the appropriate name exists, it
  cannot do so because it would run the risk or supplying the wrong
  values of one or more of these keyword arguments, thereby
  inadvertently modifying an existing generic function.

  It seems likely that the intention was to allow for semantically
  valid default values of keyword arguments that are not supplied,
  which is what this issue report suggests. 

  Furthermore, for the keyword argument :GENERIC-FUNCTION-CLASS, the
  description, uses a term "compatible" to refer to the relation
  between the class of an existing generic function and the class
  supplied by the corresponding argument.  However, the concept of
  compatibility is nowhere defined.  This issue report suggests
  eliminating the term and requiring that the old and the new class be
  the same.

Proposal (ENSURE-GENERIC-FUNCTION-REASONABLE-DEFAULTS):

  We suggest modifying the Description part of the dictionary entry
  for ENSURE-GENERIC-FUNCTION as follows:

    The function ensure-generic-function is used to define a globally
    named generic function with no methods or to specify or modify
    options and declarations that pertain to a globally named generic
    function as a whole. 

    If function-name is a list, it must be of the form (setf
    symbol).

    If function-name is not FBOUND in the global environment, a new
    generic function is created.  In that case, the following default
    values for the parameters apply:

       If the argument :GENERIC-FUNCTION-CLASS was not supplied, it
       defaults to the class named STANDARD-GENERIC-FUNCTION.

       If the argument :METHOD-CLASS was not supplied, it defaults to
       the class named STANDARD-METHOD.

       If the argument :LAMBDA-LIST was not supplied, but the argument
       :ARGUMENT-PRECEDENCE-ORDER was supplied, then an error is
       signaled.  If neither the argument :LAMBDA-LIST nor the
       argument :ARGUMENT-PRECEDENCE-ORDER was supplied, then the
       lambda list of the resulting generic function is not
       initialized.  It will then be initialized when a method is
       added, and then with a lambda list that is congruent with that
       of the method.

       If the argument :ARGUMENT-PRECEDENCE-ORDER was not supplied,
       but the argument :LAMBDA-LIST was supplied, then the argument
       :ARGUMENT-PRECEDENCE-ORDER defaults to the list of required
       parameters in the :LAMBDA-LIST argument, in the order they
       appear.  If the argument :ARGUMENT-PRECEDENCE-ORDER was
       supplied, but its value is not a proper list containing a
       permutation of the required parameters in the argument
       :LAMBDA-LIST, an error is signaled.

       If the argument :METHOD-COMBINATION was not supplied, it
       defaults to the standard method combination.

       If the argument :DOCUMENTATION was not supplied, it defaults to
       NIL.

       If the argument :DECLARE was not supplied, it defaults to NIL.

    If function-name is a symbol, and (fdefinition function-name) is
    an ordinary function, a macro, or a special operator, an error is
    signaled.

    If function-name specifies an existing generic function:

      If the argument :GENERIC-FUNCTION-CLASS was not supplied, or if
      its value is the same as the class of the existing generic
      function, then the class of the existing generic function is not
      modified.  If the argument :GENERIC-FUNCTION-CLASS was supplied
      and is different from the class of the existing generic
      function, then an error is signaled.

      If the argument :METHOD-CLASS was not supplied, or if its value
      is the same as the method-class of the existing generic
      function, then the method-class of the existing generic function
      is not modified.  If the argument :METHOD-CLASS was supplied and
      its value is different from the method-class of the existing
      generic function, then the method-class of the existing generic
      function is modified, but existing methods are not removed or
      modified.

      If the argument :LAMBDA-LIST was not supplied, the lambda list
      of the existing generic function is not modified.  If the
      argument :LAMBDA-LIST was supplied, and its value is congruent
      with the lambda lists of every existing method (which is
      trivially true if there are no existing methods), then the
      lambda list of the existing generic function is modified
      accordingly.  Otherwise, an error is signaled.  If the argument
      :LAMBDA-LIST was supplied, the argument
      :ARGUMENT-PRECEDENCE-ORDER was not supplied, and the argument
      precedence order of the existing generic function is not a
      permutation of the required parameters of the value of this
      argument, then an error is signaled.

      If the argument :ARGUMENT-PRECEDENCE-ORDER was not supplied, the
      argument precedence order of the generic function is not
      modified.  If the argument :ARGUMENT-PRECEDENCE-ORDER was
      supplied, but the lambda list of the existing generic function
      has not been initialized, an error is signaled.  If the argument
      :ARGUMENT-PRECEDENCE-ORDER was supplied, the argument
      :LAMBDA-LIST was not supplied, and the value of the former is
      not a proper list containing a permutation of the required
      parameters of the lambda list of the existing generic function,
      then an error is signaled.  If the argument
      :ARGUMENT-PRECEDENCE-ORDER was supplied, the argument
      :LAMBDA-LIST was supplied, and the value of the former is not a
      proper list containing a permutation of the required parameters
      of the value of the latter, then an error is signaled.
      Otherwise the argument precedence order of the existing generic
      function is modified accordingly.

      If the arguemnt :METHOD-COMBINATION was not supplied, then the
      method combination of the existing generic function is not
      modified.  If the argument :METHOD-COMBINATION was supplied,
      then the method combination of the existing generic function is
      modified accordingly. 

      If the argument :DOCUMENTATION was not supplied, then the
      documentation of the existing generic function is not modified.
      If the argument :DOCUMENTATION was supplied, the documentation of
      the existing generic function is modified accordingly. 

      If the argument :DECLARE was not supplied, then the declarations
      associated with the existing generic function are not modified.
      If the argument :DECLARE was supplied, the declarations associated
      with the existing generic function are modified accordingly.

  We suggest modifying the Exceptional Situations part of the
  dictionary entry for ENSURE-GENERIC-FUNCTION as follows:

    If function-name is a symbol and (fdefintion function-name)
    returns an ordinary function, a macro, or a special operator, then
    an error of type TYPE-ERROR is signaled.

    If the argument :LAMBDA-LIST was supplied, but it is not a
    valid generic-function lambda list, then an error of type
    TYPE-ERROR is signaled.

    If function-name is the name of an existing generic function, the
    argument :LAMBDA-LIST was supplied, the argument
    :ARGUMENT-PRECEDENCE-ORDER was not supplied, and the argument
    precedence order of the existing generic function is not a
    permutation of the required parameters in the value of the
    argument :LAMBDA-LIST, then an error is signaled.

    If function-name is the name of an existing generic function, the
    argument :LAMBDA-LIST was supplied, and the existing generic
    function has a method with a lambda list that is not congruent
    with the value of the argument, then an error of type TYPE-ERROR
    is signaled.

    If function-name is not the name of an existing generic function,
    the argument :ARGUMENT-PRECEDENCE-ORDER was supplied, but the
    argument :LAMBDA-LIST was not supplied, then an error is
    signaled.

    If function-name is not the name of an existing generic function,
    the argument :ARGUMENT-PRECEDENCE-ORDER was supplied, the argument
    :LAMBDA-LIST was supplied, but the value of the argument
    :ARGUMENT-PRECEDENCE-ORDER is not a proper list containing a
    permutation of the required parameters in the value of the argument
    :LAMBDA-LIST then an error is signaled.

    If the argument :GENERIC-FUNCTION-CLASS was supplied and its value
    is not a subclass of the class GENERIC-FUNCTION, nor the name of
    such a subclass, then an error of type TYPE-ERROR is signaled.

    If function-name is the name of an existing generic function, the
    argument :GENERIC-FUNCTION-CLASS was supplied, and the value
    supplied is not the same as the class of the existing generic
    function, then an error of type TYPE-ERROR is signaled.

    If the argument :METHOD-CLASS was supplied and its value is not a
    subclass of the class METHOD, nor the name of such a subclass,
    then an error of type TYPE-ERROR is signaled.

    If the argument :METHOD-COMBINATION was supplied, but its value is
    not a subclass of the class METHOD-COMBINATION, then an error of
    type TYPE-ERROR is signaled.

    If the argument :DOCUMENTATION was supplied, and its value is
    neither a string nor NIL, then an error of type TYPE-ERROR is
    signaled.

    If the argument :DECLARE is supplied, and its value is neither a
    declaration specifier containing only OPTIMIZE declaration
    specifiers nor NIL, then an error of type TYPE-ERROR is signaled.

Rationale:

  With the existing specification, using this function is very
  cumbersome, as it requires the caller to determine whether an
  existing generic function with the given name exists, and if so
  access the parameters of that generic function in order to avoid
  inadvertently modifying any of those parameters.

Current practice:

  TODO

Cost to implementors:

Cost to users:

  None

Cost of non-adoption:

  To use this function in conforming code, application programmers
  must determine whether an existing function with the given name
  exists, access the parameters of that function, and supply the
  values of the parameters that should not change as arguments to
  this function.

Benefits:

  Application programmers may rely on reasonable default behavior
  whether the name supplied is the name of an existing generic
  function or not.

Aesthetics:

  With the existing specification, conforming code must contain
  seemingly superfluous accesses to the existing generic function, or
  seemingly superfluous arguments that are often the same in every
  invocation.

Discussion:

  TODO
